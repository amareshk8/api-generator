plugins {
    id 'org.springframework.boot' version '<%= SPRING_BOOT_VERSION %>'
    id 'io.spring.dependency-management' version '<%= SPRING_DEP_MNGMNT_VERSION %>'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = '<%= packageName %>'
version = '<%= DEFAULT_APP_VERSION %>'
sourceCompatibility = '<%= JAVA_VERSION %>'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "<%= SPRING_CLOUD_VERSION %>")
    set('swaggerVersion', "<%= SWAGGER_VERSION %>")
    set('springbootTcStarterVersion', "<%= SPRING_BOOT_TC_STARTER_VERSION %>")
    set('problemSpringWebVersion', "<%= PROBLEM_SPRING_WEB_VERSION %>")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.zalando:problem-spring-web-starter:${problemSpringWebVersion}"
    <%_ if (sql === true) { _%>
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    <%_ } _%>
    <%_ if (databaseType === 'mysql') { _%>
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation "com.playtika.testcontainers:embedded-mysql:${springbootTcStarterVersion}"
    <%_ } _%>
    <%_ if (databaseType === 'postgresql') { _%>
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation "com.playtika.testcontainers:embedded-postgresql:${springbootTcStarterVersion}"
    <%_ } _%>
    <%_ if (databaseType === 'mariadb') { _%>
    testImplementation "com.playtika.testcontainers:embedded-mariadb:${springbootTcStarterVersion}"
    <%_ } _%>
    <%_ if (dbMigrationTool  === 'flywaydb') { _%>
    implementation 'org.flywaydb:flyway-core'
    <%_ } _%>
    <%_ if (dbMigrationTool === 'liquibase') { _%>
    implementation 'org.liquibase:liquibase-core'
    <%_ } _%>
    <%_ if (configClient === true) { _%>
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    <%_ } _%>
    <%_ if (eurekaClient === true) { _%>
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    <%_ } _%>
    <%_ if (distTracing === true) { _%>
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    <%_ } _%>
    implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"

    testImplementation ('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.cloud:spring-cloud-starter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}
